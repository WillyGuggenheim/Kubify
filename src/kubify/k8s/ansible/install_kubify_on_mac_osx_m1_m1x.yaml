---
- name: Install required Kubify tools & dependencieson MacOSx (for workstation or cicd)
  hosts: localhost
  vars:
    local_bin: /usr/local/bin
    kind_version: 0.11.1
    skaffold_version: 1.26.1
    skaffold_url: https://storage.googleapis.com/skaffold/releases/v{{ skaffold_version }}/skaffold-darwin-amd64
    brew_taps:
      - johanhaleby/kubetail
      - shyiko/kubesec
    brew_cask_packages:
      - docker
      - visual-studio-code
    brew_remove_packages:
      - skaffold
    kind_url: https://github.com/kubernetes-sigs/kind/releases/download/v{{ kind_version }}/kind-darwin-amd64
    helm_url: https://raw.githubusercontent.com/Homebrew/homebrew-core/1e8e12c73c465f15ae25ed8bc5f321018b9107b1/Formula/kubernetes-helm.rb # Helm 2.13
    brew_packages:
      - minikube
      # - yq
      - jq
      - jsonnet
      - kubetail
      - kubernetes-cli
      - kubecfg
      - kubectx
      - helmfile
      - coreutils
      - awscli
      - dnsmasq
      - watch
      - npm
    node_packages:
      - json-diff
      - serverless
      - serverless-python-requirements
      - serverless-reqvalidator-plugin
      - serverless-aws-documentation
      - serverless-localstack
      - serverless-plugin-aws-alerts
    install_homebrew_if_missing: true
    upgrade_homebrew_packages: true
    get_url_downloads:
      - {'bin': 'skaffold', 'url': '{{ skaffold_url }}'}
      - {'bin': 'kind', 'url': '{{ kind_url }}' }
    pip_packages:
      - jmespath
      - pyjwt

  pre_tasks:
    - name: Ensuring Homebrew Is Installed
      stat:
        path: "/usr/local/bin/brew"
      register: "homebrew_check"

    - name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
      fail:
        msg: "Homebrew is missing...Install from http://brew.sh/"
      when: >
            not homebrew_check.stat.exists and
            not install_homebrew_if_missing
    - name: Installing Homebrew
      command: '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
      when: >
            not homebrew_check.stat.exists and
            install_homebrew_if_missing

    - name: Ensuring Homebrew Is Installed 2
      stat:
        path: "/usr/local/bin/brew"
      register: "homebrew_check"

    - name: Installing Homebrew
      command: '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
      when: >
            not homebrew_check.stat.exists and
            install_homebrew_if_missing

    - name: Ensuring Homebrew Is Installed 3
      stat:
        path: "/usr/local/bin/brew"
      register: "homebrew_check"

  tasks:
    - name: Updating Homebrew
      homebrew:
        update_homebrew: true
      when: homebrew_check.stat.exists
      ignore_errors: True

    # WORKAROUND 001: brew install kubesec #gives an error
    - name: Check that the /usr/local/bin/kubesec exists
      stat:
        path: /usr/local/bin/kubesec
      register: stat_result

    # WORKAROUND 001: brew install kubesec #gives an error
    - name: Install kubesec (workaround, since brew package has issues)
      shell: curl -sSL https://github.com/shyiko/kubesec/releases/download/0.9.2/kubesec-0.9.2-darwin-amd64 -o kubesec && chmod a+x kubesec && sudo mv kubesec /usr/local/bin/
      when: not stat_result.stat.exists

    - name: Install Homebrew Taps
      homebrew_tap:
        name: "{{ brew_taps }}"
        state: "present"
      when: homebrew_check.stat.exists

    - name: Remove Homebrew packages
      homebrew:
        name: "{{ brew_remove_packages }}"
        state: "absent"
      when: homebrew_check.stat.exists

    - name: Installing Homebrew Packages
      homebrew:
        name: "{{ brew_packages }}"
        state: "present"
        upgrade_all: "{{ upgrade_homebrew_packages }}"
      when: homebrew_check.stat.exists


    - name: Installing Homebrew Cask Packages
      homebrew_cask:
        name: "{{ brew_cask_packages }}"
        state: "present"
        upgrade_all: "{{ upgrade_homebrew_packages }}"
      when: homebrew_check.stat.exists
      # until the new version of brew is released (they added accept_external_apps for pre-installed software on April 22, 2021)
      ignore_errors: yes

    # - name: Ensure Docker and VSCode are Installed
    #   shell: brew install --cask docker visual-studio-code
    #   when: homebrew_check.stat.exists
    #   # until the new version of brew is released (they added accept_external_apps for pre-installed software on April 22, 2021)
    #   ignore_errors: yes

    - name: Start Docker Desktop
      shell: open --background -a Docker

    - name: Waiting for Docker to configure
      shell: while ! /usr/local/bin/docker ps 2>&1;   do     echo "Waiting for Docker Desktop to finish Installing.." && sleep 2;   done

    - name: Upgrade minikube
      shell: brew upgrade minikube
      when: homebrew_check.stat.exists

    - name: Install helm
      shell: |
        brew unlink kubernetes-helm
        brew install {{ helm_url }}
        brew link kubernetes-helm
      when: homebrew_check.stat.exists

    - name: install via pip
      become: no
      pip:
        name: "{{ pip_packages }}"
        extra_args: --user
        executable: pip3
    
    - name: install via npm
      become: no
      npm:
        name: "{{ item }}"
        global: "yes"
        executable: npm
      with_items: "{{ node_packages }}"

    - name: install apps via url
      become: no
      get_url:
        url: "{{ item.url }}"
        dest: "{{ local_bin }}/{{ item.bin }}"
        force: "yes"
        mode: 0755
      with_items: "{{ get_url_downloads }}"

    - name: stat docker settings.json
      stat:
        path: "~/Library/Group Containers/group.com.docker/settings.json"
      tags: ['docker']
      register: file_docker_settings

    - name: configure docker memory limit
      lineinfile:
        path: "~/Library/Group Containers/group.com.docker/settings.json"
        regexp: memoryMiB
        line: '  "memoryMiB" : 5120,'
      tags: ['docker']
      when: file_docker_settings.stat.exists
      register: docker_config_changed

    - name: configure docker cpu limit
      lineinfile:
        path: "~/Library/Group Containers/group.com.docker/settings.json"
        regexp: cpus
        line: '  "cpus" : 3,'
      tags: ['docker']
      when: file_docker_settings.stat.exists
      register: docker_config_changed

    # TODO: change this all to use Kind intead of Docker Desktop
    # this is for M1 compatibility mostly, but also performance testing
    # known bug: https://github.com/docker/for-mac/issues/5410
    - name: docker desktop to use it's new framework
      lineinfile:
        path: "~/Library/Group Containers/group.com.docker/settings.json"
        regexp: useVirtualizationFramework
        # set to true for M1?
        line: '  "useVirtualizationFramework" : true,'
      tags: ['docker']
      when: file_docker_settings.stat.exists
      register: docker_config_changed

    - name: disable docker-desktop flavor of kubernetes, part 1 (migrated to Kind)
      lineinfile:
        path: "~/Library/Group Containers/group.com.docker/settings.json"
        regexp: kubernetesEnabled
        line: '  "kubernetesEnabled" : false,'
      tags: ['docker']
      when: file_docker_settings.stat.exists
      register: docker_config_changed


    # - name: enable docker-desktop flavor of kubernetes, part 2
    #   lineinfile:
    #     path: "~/Library/Group Containers/group.com.docker/settings.json"
    #     regexp: showKubernetesSystemContainers
    #     line: '  "showKubernetesSystemContainers" : false,'
    #   tags: ['docker']
    #   when: file_docker_settings.stat.exists
  
    - name: Stop Docker Desktop
      # shell: osascript -e 'quit app "Docker"' || test -z "$(docker ps -q 2>/dev/null)" && osascript -e 'quit app "Docker"'
      shell: osascript -e 'quit app "Docker"'
      when: docker_config_changed.changed

    # - name: Reset PKI Certs (Workaround 002)
    #   shell: rm -f "~/Library/Group Containers/group.com.docker/pki"
    #   when: file_docker_settings.stat.exists

    - name: Start Docker Desktop
      shell: open --background -a Docker
      when: docker_config_changed.changed

    - name: Waiting for docker ps command to succeed
      shell: while ! /usr/local/bin/docker ps 2>&1;   do     echo "Waiting for Kubernetes for Docker Desktop to Install and Configure" && sleep 2;   done

    # - name: Waiting for Kubernetes (on Docker Desktop) to configure
    #   shell: while ! /usr/local/bin/kubectl get namespaces 2>&1;   do     echo "Waiting for Kubernetes for Docker Desktop to Install and Configure" && sleep 2;   done
    #   when: file_docker_settings.stat.exists